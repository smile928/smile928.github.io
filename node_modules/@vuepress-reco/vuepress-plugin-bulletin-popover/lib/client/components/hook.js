import { ref, onMounted, computed } from 'vue';
import { useThemeLocaleData } from '@vuepress/plugin-theme-data/client';
export function useVisible() {
    const themeLocal = useThemeLocaleData();
    const bulletin = computed(() => { var _a; return (_a = themeLocal === null || themeLocal === void 0 ? void 0 : themeLocal.value) === null || _a === void 0 ? void 0 : _a.bulletin; });
    const visible = ref(false);
    const bulletinPopoverKey = '__CLOSE_BULLETIN_POPOVER__';
    onMounted(() => {
        var _a;
        const closeNote = sessionStorage.getItem(bulletinPopoverKey);
        visible.value = closeNote !== 'true' && !!((_a = bulletin === null || bulletin === void 0 ? void 0 : bulletin.value) === null || _a === void 0 ? void 0 : _a.body);
    });
    const closeBulletinPopover = () => {
        visible.value = false;
        sessionStorage.setItem(bulletinPopoverKey, 'true');
    };
    return { visible, bulletin, closeBulletinPopover };
}
const nodeHandler = {
    handleImage(node) {
        return `<img style=\"${node.style || ''}\" src=\"${node.src}\" />`;
    },
    handleText(node) {
        return `<div style=\"${node.style || ''}\">${node.content}</div>`;
    },
    handleTitle(node) {
        return `<h5 style=\"${node.style || ''}\">${node.content}</h5>`;
    },
    handleButton(node) {
        return `<a style=\"${node.style || ''}\" class=\"btn\" href=\"${node.link}\">${node.text}</a>`;
    },
    handleButtongroup(node) {
        const btnChildren = (node.children || []).reduce((total, next) => {
            return total += `<a style=\"${next.style || node.style || ''}\" class=\"btn\" href=\"${next.link}\">${next.text}</a>`;
        }, '');
        return `<div class="btn-group">${btnChildren}</div>`;
    },
    handleHr(node) {
        return `<hr />`;
    },
};
export function useHandleNodes() {
    const themeLocal = useThemeLocaleData();
    function handleNode(nodes) {
        if (!Array.isArray(nodes)) {
            let type = nodes.type;
            type = type.slice(0, 1).toUpperCase() + type.slice(1);
            return nodeHandler[`handle${type}`](nodes);
        }
        else {
            return nodes.map(node => handleNode(node));
        }
    }
    const bodyNodes = computed(() => {
        var _a, _b;
        return handleNode((_b = (_a = themeLocal === null || themeLocal === void 0 ? void 0 : themeLocal.value) === null || _a === void 0 ? void 0 : _a.bulletin) === null || _b === void 0 ? void 0 : _b.body).join('');
    });
    return { bodyNodes, handleNode };
}
